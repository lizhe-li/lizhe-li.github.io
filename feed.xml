<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://lizhe-li.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://lizhe-li.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-19T11:07:01+00:00</updated><id>https://lizhe-li.github.io/feed.xml</id><title type="html">blank</title><subtitle>A researcher concerned with the relationship between human and machine communication. </subtitle><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://lizhe-li.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://lizhe-li.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://lizhe-li.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with diagrams</title><link href="https://lizhe-li.github.io/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://lizhe-li.github.io/blog/2021/diagrams</id><content type="html" xml:base="https://lizhe-li.github.io/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <h2 id="mermaid">Mermaid</h2> <p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1697713630502" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1697713630502 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1697713630502 .node circle,#mermaid-1697713630502 .node ellipse,#mermaid-1697713630502 .node polygon,#mermaid-1697713630502 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1697713630502 .node.clickable{cursor:pointer}#mermaid-1697713630502 .arrowheadPath{fill:#333}#mermaid-1697713630502 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1697713630502 .edgeLabel{background-color:#e8e8e8}#mermaid-1697713630502 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1697713630502 .cluster text{fill:#333}#mermaid-1697713630502 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1697713630502 .actor{stroke:#ccf;fill:#ececff}#mermaid-1697713630502 text.actor{fill:#000;stroke:none}#mermaid-1697713630502 .actor-line{stroke:grey}#mermaid-1697713630502 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1697713630502 .messageLine0,#mermaid-1697713630502 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1697713630502 #arrowhead{fill:#333}#mermaid-1697713630502 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1697713630502 .messageText{fill:#333;stroke:none}#mermaid-1697713630502 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1697713630502 .labelText,#mermaid-1697713630502 .loopText{fill:#000;stroke:none}#mermaid-1697713630502 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1697713630502 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1697713630502 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1697713630502 .section{stroke:none;opacity:.2}#mermaid-1697713630502 .section0{fill:rgba(102,102,255,.49)}#mermaid-1697713630502 .section2{fill:#fff400}#mermaid-1697713630502 .section1,#mermaid-1697713630502 .section3{fill:#fff;opacity:.2}#mermaid-1697713630502 .sectionTitle0,#mermaid-1697713630502 .sectionTitle1,#mermaid-1697713630502 .sectionTitle2,#mermaid-1697713630502 .sectionTitle3{fill:#333}#mermaid-1697713630502 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1697713630502 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1697713630502 .grid path{stroke-width:0}#mermaid-1697713630502 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1697713630502 .task{stroke-width:2}#mermaid-1697713630502 .taskText{text-anchor:middle;font-size:11px}#mermaid-1697713630502 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1697713630502 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1697713630502 .taskText0,#mermaid-1697713630502 .taskText1,#mermaid-1697713630502 .taskText2,#mermaid-1697713630502 .taskText3{fill:#fff}#mermaid-1697713630502 .task0,#mermaid-1697713630502 .task1,#mermaid-1697713630502 .task2,#mermaid-1697713630502 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1697713630502 .taskTextOutside0,#mermaid-1697713630502 .taskTextOutside1,#mermaid-1697713630502 .taskTextOutside2,#mermaid-1697713630502 .taskTextOutside3{fill:#000}#mermaid-1697713630502 .active0,#mermaid-1697713630502 .active1,#mermaid-1697713630502 .active2,#mermaid-1697713630502 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1697713630502 .activeText0,#mermaid-1697713630502 .activeText1,#mermaid-1697713630502 .activeText2,#mermaid-1697713630502 .activeText3{fill:#000!important}#mermaid-1697713630502 .done0,#mermaid-1697713630502 .done1,#mermaid-1697713630502 .done2,#mermaid-1697713630502 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1697713630502 .doneText0,#mermaid-1697713630502 .doneText1,#mermaid-1697713630502 .doneText2,#mermaid-1697713630502 .doneText3{fill:#000!important}#mermaid-1697713630502 .crit0,#mermaid-1697713630502 .crit1,#mermaid-1697713630502 .crit2,#mermaid-1697713630502 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1697713630502 .activeCrit0,#mermaid-1697713630502 .activeCrit1,#mermaid-1697713630502 .activeCrit2,#mermaid-1697713630502 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1697713630502 .doneCrit0,#mermaid-1697713630502 .doneCrit1,#mermaid-1697713630502 .doneCrit2,#mermaid-1697713630502 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1697713630502 .activeCritText0,#mermaid-1697713630502 .activeCritText1,#mermaid-1697713630502 .activeCritText2,#mermaid-1697713630502 .activeCritText3,#mermaid-1697713630502 .doneCritText0,#mermaid-1697713630502 .doneCritText1,#mermaid-1697713630502 .doneCritText2,#mermaid-1697713630502 .doneCritText3{fill:#000!important}#mermaid-1697713630502 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1697713630502 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1697713630502 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1697713630502 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1697713630502 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1697713630502 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1697713630502 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1697713630502 #compositionEnd,#mermaid-1697713630502 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1697713630502 #aggregationEnd,#mermaid-1697713630502 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1697713630502 #dependencyEnd,#mermaid-1697713630502 #dependencyStart,#mermaid-1697713630502 #extensionEnd,#mermaid-1697713630502 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1697713630502 .branch-label,#mermaid-1697713630502 .commit-id,#mermaid-1697713630502 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1697713630502{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div>]]></content><author><name></name></author><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a post with code</title><link href="https://lizhe-li.github.io/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://lizhe-li.github.io/blog/2015/code</id><content type="html" xml:base="https://lizhe-li.github.io/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">   1.</span> Like this:
      <span class="p">```</span><span class="nl">c
</span>      <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
      <span class="p">```</span>
<span class="p">
   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li>We can put fenced code blocks inside nested bullets, too. <ol> <li>Like this: <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>The key is to indent your fenced block in the same line as the first character of the line.</li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>